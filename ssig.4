; -*- Mode: Scheme; Syntax: Scheme; Package: Scheme; -*-

;;;; Scheme signature

(define-signature revised^3-scheme-sig		;191
  (values * + - / < <= = > >=
	  abs acos angle append apply assoc assq assv atan
	  boolean?
	  caaaar caaadr caadar caaddr caaar caadr caar
	  cadaar cadadr caddar cadddr cadar caddr cadr
	  call-with-current-continuation call-with-input-file
	  call-with-output-file car
	  cdaaar cdaadr cdadar cdaddr cdaar cdadr cdar
	  cddaar cddadr cdddar cddddr cddar cdddr cddr
	  cdr ceiling char->integer char-alphabetic?
	  char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>?
	  char-downcase char-lower-case? char-numeric? char-ready?
	  char-upcase
	  char-upper-case? char-whitespace? char<=? char<? char=?
	  char>=? char>? char? close-input-port close-output-port
	  complex? cons cos current-input-port current-output-port
	  denominator display
	  eof-object? eq? equal? eqv? even? exact->inexact exact?
	  exp expt
	  floor for-each force
	  gcd
	  imag-part inexact->exact inexact? input-port?
	  integer->char integer?
	  last-pair lcm length list list->string list->vector
	  ;; LOAD should be user interface...
	  list-ref list-tail load log
	  magnitude make-polar make-rectangular make-string
	  make-vector map max member memq memv min modulo
	  negative? newline nil not null? number? number->string
	  numerator
	  odd? open-input-file open-output-file output-port?
	  pair? positive? procedure?
	  quotient
	  rational? rationalize read read-char real-part real?
	  remainder reverse round
	  set-car! set-cdr! sin sqrt string->list string->number
	  string->symbol
	  string-ci<=? string-ci<? string-ci>=? string-ci>?
	  string-append string-copy string-fill! string-length string-ref
	  string-set! string=? string? symbol->string symbol?
	  t tan transcript-on transcript-off truncate
	  vector vector->list vector-fill! vector-length
	  vector-ref vector-set! vector?
	  with-input-from-file with-output-to-file write write-char
	  zero?
	  ))
